{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport useRequest from '../../hooks/use-request';\nimport Router from 'next/router';\nimport Head from 'next/head';\nimport paths from '../../paths';\n\nconst OrderShow = ({\n  order,\n  currentUser,\n  title\n}) => {\n  const {\n    0: timeLeft,\n    1: setTimeLeft\n  } = useState(0);\n  const {\n    doRequest,\n    errors\n  } = useRequest({\n    url: `${paths.payments}`,\n    method: 'post',\n    body: {\n      orderId: order.id\n    },\n    onSuccess: () => Router.push(`${paths.orders}`)\n  });\n  useEffect(() => {\n    const findTimeLeft = () => {\n      const msLeft = new Date(order.expiresAt) - new Date();\n      setTimeLeft(Math.round(msLeft / 1000));\n    };\n\n    findTimeLeft();\n    const timerId = setInterval(findTimeLeft, 1000);\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  if (timeLeft < 0) {\n    return __jsx(\"div\", null, \"The order has expired\");\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"You are buying \", order.ticket.title)), __jsx(\"div\", null, __jsx(\"h2\", null, order.ticket.title)), __jsx(\"div\", null, timeLeft, \" seconds until the order expires.\", __jsx(StripeCheckout, {\n    token: ({\n      id\n    }) => doRequest({\n      token: id\n    }),\n    stripeKey: \"pk_test_YLQNU5ASOcPu7s7KufOMDcT50002vQ1ugm\",\n    amount: order.ticket.price * 100,\n    email: currentUser.email\n  }), errors));\n};\n\nOrderShow.getInitialProps = async (context, client) => {\n  const {\n    orderId\n  } = context.query;\n  const {\n    data\n  } = await client.get(`/api/orders/${orderId}`);\n  return {\n    order: data\n  };\n};\n\nexport default OrderShow;","map":null,"metadata":{},"sourceType":"module"}