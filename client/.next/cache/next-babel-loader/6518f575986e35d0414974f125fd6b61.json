{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport useRequest from '../../hooks/use-request';\nimport Router from 'next/router';\n\nvar OrderShow = function OrderShow(_ref) {\n  var order = _ref.order,\n      currentUser = _ref.currentUser;\n\n  var _useState = useState(0),\n      timeLeft = _useState[0],\n      setTimeLeft = _useState[1];\n\n  var _useRequest = useRequest({\n    url: '/api/payments',\n    method: 'post',\n    body: {\n      orderId: order.id\n    },\n    onSuccess: function onSuccess() {\n      return Router.push('/orders');\n    }\n  }),\n      doRequest = _useRequest.doRequest,\n      errors = _useRequest.errors;\n\n  useEffect(function () {\n    var findTimeLeft = function findTimeLeft() {\n      var msLeft = new Date(order.expiresAt) - new Date();\n      setTimeLeft(Math.round(msLeft / 1000));\n    };\n\n    findTimeLeft();\n    var timerId = setInterval(findTimeLeft, 1000);\n    return function () {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  if (timeLeft < 0) {\n    return __jsx(\"div\", null, \"The order has expired\");\n  }\n\n  return __jsx(\"div\", null, timeLeft, \" seconds until the order expires.\", __jsx(StripeCheckout, {\n    token: function token(_ref2) {\n      var id = _ref2.id;\n      return doRequest({\n        token: id\n      });\n    },\n    stripeKey: \"pk_test_YLQNU5ASOcPu7s7KufOMDcT50002vQ1ugm\",\n    amount: order.ticket.price * 100,\n    email: currentUser.email\n  }), errors);\n};\n\nOrderShow.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context, client) {\n    var orderId, _yield$client$get, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            orderId = context.query.orderId;\n            _context.next = 3;\n            return client.get(\"/api/orders/\".concat(orderId));\n\n          case 3:\n            _yield$client$get = _context.sent;\n            data = _yield$client$get.data;\n            return _context.abrupt(\"return\", {\n              order: data\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default OrderShow;","map":null,"metadata":{},"sourceType":"module"}