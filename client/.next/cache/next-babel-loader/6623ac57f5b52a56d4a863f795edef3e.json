{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/piotrnapierala/Desktop/microservices/ticketing/client/components/register.js\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport theme from '../components/styles/theme';\nimport { device } from '../components/styles/device';\nimport styled from 'styled-components';\nvar colors = theme.colors,\n    fontSizes = theme.fontSizes;\nvar StyledForm = styled(Form).withConfig({\n  displayName: \"register__StyledForm\",\n  componentId: \"sc-1h70zzu-0\"\n})([\"display:flex;flex-direction:column;align-items:center;label{font-size:\", \";font-weight:700;color:\", \";margin-bottom:1rem;}input{outline:none;border:2.5px solid \", \";border-radius:100px;padding:0.5rem 2.6rem;background-color:\", \";font-size:\", \";}button{padding:0.5rem 5rem;color:\", \";background-color:\", \";}\"], fontSizes.XXlarge, colors.lightText, colors.purple, colors.white, fontSizes.large, colors.white, colors.purple);\n_c = StyledForm;\nvar StyledError = styled(ErrorMessage).withConfig({\n  displayName: \"register__StyledError\",\n  componentId: \"sc-1h70zzu-1\"\n})([\"color:\", \";font-size:\", \";border-radius:100px;:focus,:hover{color:}\"], colors.purple, fontSizes.small);\n_c2 = StyledError;\nexport default (function () {\n  return __jsx(Formik, {\n    onSubmit: /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return new Promise(function (res) {\n                  return setTimeout(res, 500);\n                });\n\n              case 2:\n                alert(JSON.stringify(values, null, 2));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    initialValues: {\n      email: ''\n    },\n    validationSchema: Yup.object().shape({\n      email: Yup.string().email('You should change something!').required('Your email is required.')\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var isSubmitting = _ref2.isSubmitting;\n    return __jsx(StyledForm, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"email\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, \"Get Informed Every Week!\"), __jsx(Field, {\n      type: \"email\",\n      name: \"email\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }), __jsx(StyledError, {\n      name: \"email\",\n      compoenent: \"div\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, \"Submit\"));\n  });\n});\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledForm\");\n$RefreshReg$(_c2, \"StyledError\");","map":{"version":3,"sources":["/Users/piotrnapierala/Desktop/microservices/ticketing/client/components/register.js"],"names":["React","Formik","Form","Field","ErrorMessage","Yup","theme","device","styled","colors","fontSizes","StyledForm","XXlarge","lightText","purple","white","large","StyledError","small","values","Promise","res","setTimeout","alert","JSON","stringify","email","object","shape","string","required","isSubmitting"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,SAASC,MAAT,QAAuB,6BAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;IAEQC,M,GAAsBH,K,CAAtBG,M;IAAQC,S,GAAcJ,K,CAAdI,S;AAEhB,IAAMC,UAAU,GAAGH,MAAM,CAACN,IAAD,CAAT;AAAA;AAAA;AAAA,2TAMCQ,SAAS,CAACE,OANX,EAQHH,MAAM,CAACI,SARJ,EAaUJ,MAAM,CAACK,MAbjB,EAgBQL,MAAM,CAACM,KAhBf,EAiBCL,SAAS,CAACM,KAjBX,EAqBHP,MAAM,CAACM,KArBJ,EAsBQN,MAAM,CAACK,MAtBf,CAAhB;KAAMH,U;AA0BN,IAAMM,WAAW,GAAGT,MAAM,CAACJ,YAAD,CAAT;AAAA;AAAA;AAAA,4EACNK,MAAM,CAACK,MADD,EAEFJ,SAAS,CAACQ,KAFR,CAAjB;MAAMD,W;AAWN,gBAAe,YAAM;AACnB,SACE,MAAC,MAAD;AACE,IAAA,QAAQ;AAAA,0EAAE,iBAAOE,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACF,IAAIC,OAAJ,CAAY,UAACC,GAAD;AAAA,yBAASC,UAAU,CAACD,GAAD,EAAM,GAAN,CAAnB;AAAA,iBAAZ,CADE;;AAAA;AAERE,gBAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeN,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;;AAFQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA,OADV;AAKE,IAAA,aAAa,EAAE;AAAEO,MAAAA,KAAK,EAAE;AAAT,KALjB;AAME,IAAA,gBAAgB,EAAErB,GAAG,CAACsB,MAAJ,GAAaC,KAAb,CAAmB;AACnCF,MAAAA,KAAK,EAAErB,GAAG,CAACwB,MAAJ,GACJH,KADI,CACE,8BADF,EAEJI,QAFI,CAEK,yBAFL;AAD4B,KAAnB,CANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYG;AAAA,QAAGC,YAAH,SAAGA,YAAH;AAAA,WACC,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,EAEE,MAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,IAAI,EAAC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,MAAC,WAAD;AAAa,MAAA,IAAI,EAAC,OAAlB;AAA0B,MAAA,UAAU,EAAC,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAEA,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,CADD;AAAA,GAZH,CADF;AAyBD,CA1BD","sourcesContent":["import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport theme from '../components/styles/theme';\nimport { device } from '../components/styles/device';\nimport styled from 'styled-components';\n\nconst { colors, fontSizes } = theme;\n\nconst StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  label {\n    font-size: ${fontSizes.XXlarge};\n    font-weight: 700;\n    color: ${colors.lightText};\n    margin-bottom: 1rem;\n  }\n  input {\n    outline: none;\n    border: 2.5px solid ${colors.purple};\n    border-radius: 100px;\n    padding: 0.5rem 2.6rem;\n    background-color: ${colors.white};\n    font-size: ${fontSizes.large};\n  }\n  button {\n    padding: 0.5rem 5rem;\n    color: ${colors.white};\n    background-color: ${colors.purple};\n  }\n`;\n\nconst StyledError = styled(ErrorMessage)`\n  color: ${colors.purple};\n  font-size: ${fontSizes.small};\n  border-radius: 100px;\n\n  :focus,\n  :hover {\n    color: \n  }\n`;\n\nexport default () => {\n  return (\n    <Formik\n      onSubmit={async (values) => {\n        await new Promise((res) => setTimeout(res, 500));\n        alert(JSON.stringify(values, null, 2));\n      }}\n      initialValues={{ email: '' }}\n      validationSchema={Yup.object().shape({\n        email: Yup.string()\n          .email('You should change something!')\n          .required('Your email is required.'),\n      })}\n    >\n      {({ isSubmitting }) => (\n        <StyledForm>\n          <label htmlFor='email'>Get Informed Every Week!</label>\n          <Field type='email' name='email' />\n          <StyledError name='email' compoenent='div' />\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </StyledForm>\n      )}\n    </Formik>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}